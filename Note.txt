======================================
ssh访问远程tensorboard

本机运行：
ssh -L 16006:127.0.0.1:6006 zzydty@172.29.244.218 -N -v -v

远端运行：
nohup tensorboard --logdir=./ --port=6006 --samples_per_plugin scalars=999999999

本地浏览器访问：
http://localhost:16006

如果要重新运行，可以用以下指令杀死6006端口上的进程：
fuser -k 6006/tcp

========================================
Nohup：在ssh断开的情况下也能跑程序
删除上次的记录：
rm nohup.out

用nohup 运行一个python文件
nohup python3 -u train.py > nohup.out 2>&1 &

然后输入以下命令，这样程序就不会被终端影响，可以在后台运行，并且不会被杀死
disown

想要实时看到输出结果就再写一行代码
tail -fn 50 nohup.out

查看后台进程的PID：
ps

如果关闭了命令行，可以这样查看进程PID：
ps aux | grep "train.py"

终止进程：
kill -9 PID
=======================================
reward = goal_rw + goaled_penety + ball_grad_rw + robot_grad_rw + energy_rw
attack agent
进球给予大的reward，被进球给予小的penalty，鼓励agent前往对方半场
defend agent
进球给予小的reward，被进球给予大的penalty，鼓励agent传球

=======================================
best agent: models/VSS-v0/0/7408k
sub-best agent: models/VSS-v0/0/4326k
gk agent: models/VSSGk-v0/0/3841k
best DDPG agent: models/VSS-v0/1/


曲线1：PER buffer，前100个episode[1 * best agent vs  1 * sub-best agent]，后100个episode[1 * best agent vs  1 * gk agent]
结果：VSS-v0 num1000


曲线2：PER buffer，前100个episode[1 * best agent vs  1 * sub-best agent]，后100个episode[1 * best agent vs  1 * sub-best agent，环境有噪声]


曲线3：normal buffer，前100个episode[1 * best agent vs  1 * sub-best agent]，后100个episode[1 * best agent vs  1 * gk agent]
结果：VSS-v0 num1001


num1000-1002:PER 变化对手

num1010-1012:DEFAULT 变化对手

num1003 1004 1005:PER 变化对手(较弱)

num1013:DEFAULT 变化对手
-================

num 2000: PER 变化对手
num 2010:PER 噪声环境 n=0.01
num 2011:PER 噪声环境 n=0.05
num 2012:PER 噪声环境 n=0.10
num 2013:PER 动态噪声环境，初始值n=0.05
num 2014:PER 动态噪声环境，初始值n=0.05
num 2015:PER 动态噪声环境，初始值n=0.05

num 2100: ADV 变化对手
num 2110: ADV 动态噪声环境， n=0.02

num 3000: PER 变化对手，训练到收敛，buffer size 500000

num 3100: 【调整了超参数】 PER变化对手：随机->守门员，buffer size 500000
num 3100: 【调整了超参数】 PER变化对手：随机->较弱的守门员，buffer size 500000


Simple 11:  PER 10000+100000
Simple 12: advER 10000+100000

Simple 21: advER  5e5
Simple 22: PER  5e5
Simple 24: advER  1e5
Simple 25: vanilla 1e5
Simple 26: PER  1e5
Simple 27: CER  1e5

CER 11
vanila 12======================================
ssh访问远程tensorboard

本机运行：
ssh -L 16006:127.0.0.1:6006 zzydty@172.29.244.218 -N -v -v

远端运行：
nohup tensorboard --logdir=./ --port=6006 --samples_per_plugin scalars=999999999

本地浏览器访问：
http://localhost:16006

如果要重新运行，可以用以下指令杀死6006端口上的进程：
fuser -k 6006/tcp

========================================
Nohup：在ssh断开的情况下也能跑程序
删除上次的记录：
rm nohup.out

用nohup 运行一个python文件
nohup python3 -u train.py > nohup.out 2>&1 &

然后输入以下命令，这样程序就不会被终端影响，可以在后台运行，并且不会被杀死
disown

想要实时看到输出结果就再写一行代码
tail -fn 50 nohup.out

查看后台进程的PID：
ps

如果关闭了命令行，可以这样查看进程PID：
ps aux | grep "train.py"

终止进程：
kill -9 PID
=======================================
reward = goal_rw + goaled_penety + ball_grad_rw + robot_grad_rw + energy_rw
attack agent
进球给予大的reward，被进球给予小的penalty，鼓励agent前往对方半场
defend agent
进球给予小的reward，被进球给予大的penalty，鼓励agent传球

=======================================
best agent: models/VSS-v0/0/7408k
sub-best agent: models/VSS-v0/0/4326k
gk agent: models/VSSGk-v0/0/3841k
best DDPG agent: models/VSS-v0/1/


曲线1：PER buffer，前100个episode[1 * best agent vs  1 * sub-best agent]，后100个episode[1 * best agent vs  1 * gk agent]
结果：VSS-v0 num1000


曲线2：PER buffer，前100个episode[1 * best agent vs  1 * sub-best agent]，后100个episode[1 * best agent vs  1 * sub-best agent，环境有噪声]


曲线3：normal buffer，前100个episode[1 * best agent vs  1 * sub-best agent]，后100个episode[1 * best agent vs  1 * gk agent]
结果：VSS-v0 num1001


num1000-1002:PER 变化对手

num1010-1012:DEFAULT 变化对手

num1003 1004 1005:PER 变化对手(较弱)

num1013:DEFAULT 变化对手
-================

num 2000: PER 变化对手
num 2010:PER 噪声环境 n=0.01
num 2011:PER 噪声环境 n=0.05
num 2012:PER 噪声环境 n=0.10
num 2013:PER 动态噪声环境，初始值n=0.05
num 2014:PER 动态噪声环境，初始值n=0.05
num 2015:PER 动态噪声环境，初始值n=0.05

num 2100: ADV 变化对手
num 2110: ADV 动态噪声环境， n=0.02

num 3000: PER 变化对手，训练到收敛，buffer size 500000

num 3100: 【调整了超参数】 PER变化对手：随机->守门员，buffer size 500000
num 3100: 【调整了超参数】 PER变化对手：随机->较弱的守门员，buffer size 500000


Simple 11:  PER 10000+100000
Simple 12: advER 10000+100000

Simple 21: advER  5e5
Simple 22: PER  5e5
Simple 24: advER  1e5
Simple 25: vanilla 1e5
Simple 26: PER  1e5
Simple 27: CER  1e5

CER 11
vanila 12